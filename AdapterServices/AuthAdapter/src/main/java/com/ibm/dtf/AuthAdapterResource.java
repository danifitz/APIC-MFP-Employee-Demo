package com.ibm.dtf;import com.ibm.mfp.server.registration.external.model.AuthenticatedUser;import com.ibm.mfp.security.checks.base.UserAuthenticationSecurityCheck;import java.util.HashMap;import java.util.Map;public class AuthAdapterResource extends UserAuthenticationSecurityCheck {		@Override		protected AuthenticatedUser createUser() {		    return new AuthenticatedUser(userId, displayName, this.getName());		}		private String displayName, userId, errorMsg;		@Override		protected boolean validateCredentials(Map<String, Object> credentials) {		   if(credentials != null && credentials .containsKey("username")			 && credentials.containsKey("password")) {				 String username = credentials.get("username").toString();				 String password = credentials.get("password").toString();				 if(!username.isEmpty() && !password.isEmpty() &&				 username.equals(password)) {           userId = username;           displayName = username;					 return true;				 } else {					 errorMsg = "Wrong credentials";				 }			 } else {				 errorMsg = "Credentials not set properly";			 }			 return false;		}		@Override		protected Map<String, Object> createChallenge() {		   Map challenge = new HashMap();			 challenge.put("errorMsg", errorMsg);			 challenge.put("remainingAttempts", getRemainingAttempts());			 return challenge;		}}